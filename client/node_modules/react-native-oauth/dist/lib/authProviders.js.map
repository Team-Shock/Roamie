{"version":3,"sources":["../../lib/authProviders.js"],"names":["notEmpty","str","Type","isString","String","isEmpty","isValid","prop","validations","map","val","fn","withDefaultValidations","Object","assign","callback_url","validate","customValidations","props","keys","property","authProviders","auth_version","request_token_url","authorize_url","access_token_url","api_url","app_name","consumer_key","consumer_secret","client_id","client_secret","defaultParams","token"],"mappings":"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","file":"authProviders.js","sourcesContent":["import invariant from 'invariant';\nimport {Type, String} from 'valib';\n\nconst notEmpty = (str) => Type.isString(str) && !String.isEmpty(str) || 'cannot be empty';\n\nconst isValid = (prop, str, validations=[]) => {\n  return validations\n          .map(fn => {\n            const val = fn(str);\n            invariant(typeof val === 'boolean', `${prop} ${val}`)\n          });\n}\nconst withDefaultValidations = (validations) => Object.assign({}, {\n  callback_url: [notEmpty]\n}, validations);\n\nconst validate = (customValidations={}) => (props) => {\n  const validations = withDefaultValidations(customValidations);\n  return Object.keys(props)\n        .map(property => isValid(property, props[property], validations[property]));\n}\n\nexport const authProviders = {\n  'twitter': {\n    auth_version: \"1.0\",\n    request_token_url: 'https://api.twitter.com/oauth/request_token',\n    authorize_url: 'https://api.twitter.com/oauth/authorize',\n    access_token_url: 'https://api.twitter.com/oauth/access_token',\n    api_url: 'https://api.twitter.com',\n    callback_url: ({app_name}) => `${app_name}://oauth-response/twitter`,\n\n    validate: validate({\n      consumer_key: [notEmpty],\n      consumer_secret: [notEmpty]\n    })\n  },\n  'facebook': {\n    auth_version: \"2.0\",\n    authorize_url: 'https://graph.facebook.com/oauth/authorize',\n    api_url: 'https://graph.facebook.com',\n    callback_url: ({client_id}) => `fb${client_id}://authorize`,\n\n    validate: validate({\n      client_id: [notEmpty],\n      client_secret: [notEmpty]\n    })\n  },\n  'google': {\n    auth_version: \"2.0\",\n    authorize_url: 'https://accounts.google.com/o/oauth2/auth',\n    access_token_url: 'https://accounts.google.com/o/oauth2/token',\n    callback_url: ({app_name}) => `${app_name}://oauth-response`,\n    validate: validate()\n  },\n  'github': {\n    auth_version: '2.0',\n    authorize_url: 'https://github.com/login/oauth/authorize',\n    access_token_url: 'https://github.com/login/oauth/access_token',\n    api_url: 'https://api.github.com',\n    callback_url: ({app_name}) => `${app_name}://oauth`,\n    validate: validate()\n  },\n  'slack': {\n    auth_version: '2.0',\n    authorize_url: 'https://slack.com/oauth/authorize',\n    access_token_url: 'https://slack.com/api/oauth.access',\n    api_url: 'https://slack.com/api',\n    callback_url: ({app_name}) => `${app_name}://oauth`,\n    defaultParams: {\n      token: 'access_token'\n    },\n    validate: validate({\n      client_id: [notEmpty],\n      client_secret: [notEmpty]\n    })\n  },\n  'spotify': {\n    auth_version: \"2.0\",\n    authorize_url: 'https://accounts.spotify.com/authorize',\n    api_url: 'https://api.spotify.com/',\n    callback_url: ({app_name}) => `${app_name}://authorize`,\n\n    validate: validate({\n      client_id: [notEmpty],\n      client_secret: [notEmpty]\n    })\n  },\n}\n\nexport default authProviders;\n"]}