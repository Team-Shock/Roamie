{"version":3,"sources":["../../../node_modules/lodash/unionWith.js"],"names":["baseFlatten","require","baseRest","baseUniq","isArrayLikeObject","last","unionWith","arrays","comparator","undefined","module","exports"],"mappings":";;AAAA,IAAIA,cAAcC,QAAQ,gBAAR,CAAlB;AAAA,IACIC,WAAWD,QAAQ,aAAR,CADf;AAAA,IAEIE,WAAWF,QAAQ,aAAR,CAFf;AAAA,IAGIG,oBAAoBH,QAAQ,qBAAR,CAHxB;AAAA,IAIII,OAAOJ,QAAQ,QAAR,CAJX;;AAMA;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAIK,YAAYJ,SAAS,UAASK,MAAT,EAAiB;AACxC,MAAIC,aAAaH,KAAKE,MAAL,CAAjB;AACAC,eAAa,OAAOA,UAAP,IAAqB,UAArB,GAAkCA,UAAlC,GAA+CC,SAA5D;AACA,SAAON,SAASH,YAAYO,MAAZ,EAAoB,CAApB,EAAuBH,iBAAvB,EAA0C,IAA1C,CAAT,EAA0DK,SAA1D,EAAqED,UAArE,CAAP;AACD,CAJe,CAAhB;;AAMAE,OAAOC,OAAP,GAAiBL,SAAjB","file":"unionWith.js","sourcesContent":["var baseFlatten = require('./_baseFlatten'),\n    baseRest = require('./_baseRest'),\n    baseUniq = require('./_baseUniq'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last');\n\n/**\n * This method is like `_.union` except that it accepts `comparator` which\n * is invoked to compare elements of `arrays`. Result values are chosen from\n * the first array in which the value occurs. The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.unionWith(objects, others, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n */\nvar unionWith = baseRest(function(arrays) {\n  var comparator = last(arrays);\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n});\n\nmodule.exports = unionWith;\n"]}