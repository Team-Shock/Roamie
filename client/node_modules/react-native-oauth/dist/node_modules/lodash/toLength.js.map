{"version":3,"sources":["../../../node_modules/lodash/toLength.js"],"names":["baseClamp","require","toInteger","MAX_ARRAY_LENGTH","toLength","value","module","exports"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQ,cAAR,CAAhB;AAAA,IACIC,YAAYD,QAAQ,aAAR,CADhB;;AAGA;AACA,IAAIE,mBAAmB,UAAvB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,SAAOA,QAAQL,UAAUE,UAAUG,KAAV,CAAV,EAA4B,CAA5B,EAA+BF,gBAA/B,CAAR,GAA2D,CAAlE;AACD;;AAEDG,OAAOC,OAAP,GAAiBH,QAAjB","file":"toLength.js","sourcesContent":["var baseClamp = require('./_baseClamp'),\n    toInteger = require('./toInteger');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Converts `value` to an integer suitable for use as the length of an\n * array-like object.\n *\n * **Note:** This method is based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toLength(3.2);\n * // => 3\n *\n * _.toLength(Number.MIN_VALUE);\n * // => 0\n *\n * _.toLength(Infinity);\n * // => 4294967295\n *\n * _.toLength('3.2');\n * // => 3\n */\nfunction toLength(value) {\n  return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n}\n\nmodule.exports = toLength;\n"]}