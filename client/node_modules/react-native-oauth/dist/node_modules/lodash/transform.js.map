{"version":3,"sources":["../../../node_modules/lodash/transform.js"],"names":["arrayEach","require","baseCreate","baseForOwn","baseIteratee","getPrototype","isArray","isBuffer","isFunction","isObject","isTypedArray","transform","object","iteratee","accumulator","isArr","isArrLike","Ctor","constructor","value","index","module","exports"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQ,cAAR,CAAhB;AAAA,IACIC,aAAaD,QAAQ,eAAR,CADjB;AAAA,IAEIE,aAAaF,QAAQ,eAAR,CAFjB;AAAA,IAGIG,eAAeH,QAAQ,iBAAR,CAHnB;AAAA,IAIII,eAAeJ,QAAQ,iBAAR,CAJnB;AAAA,IAKIK,UAAUL,QAAQ,WAAR,CALd;AAAA,IAMIM,WAAWN,QAAQ,YAAR,CANf;AAAA,IAOIO,aAAaP,QAAQ,cAAR,CAPjB;AAAA,IAQIQ,WAAWR,QAAQ,YAAR,CARf;AAAA,IASIS,eAAeT,QAAQ,gBAAR,CATnB;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,SAASU,SAAT,CAAmBC,MAAnB,EAA2BC,QAA3B,EAAqCC,WAArC,EAAkD;AAChD,MAAIC,QAAQT,QAAQM,MAAR,CAAZ;AAAA,MACII,YAAYD,SAASR,SAASK,MAAT,CAAT,IAA6BF,aAAaE,MAAb,CAD7C;;AAGAC,aAAWT,aAAaS,QAAb,EAAuB,CAAvB,CAAX;AACA,MAAIC,eAAe,IAAnB,EAAyB;AACvB,QAAIG,OAAOL,UAAUA,OAAOM,WAA5B;AACA,QAAIF,SAAJ,EAAe;AACbF,oBAAcC,QAAQ,IAAIE,IAAJ,EAAR,GAAmB,EAAjC;AACD,KAFD,MAGK,IAAIR,SAASG,MAAT,CAAJ,EAAsB;AACzBE,oBAAcN,WAAWS,IAAX,IAAmBf,WAAWG,aAAaO,MAAb,CAAX,CAAnB,GAAsD,EAApE;AACD,KAFI,MAGA;AACHE,oBAAc,EAAd;AACD;AACF;AACD,GAACE,YAAYhB,SAAZ,GAAwBG,UAAzB,EAAqCS,MAArC,EAA6C,UAASO,KAAT,EAAgBC,KAAhB,EAAuBR,MAAvB,EAA+B;AAC1E,WAAOC,SAASC,WAAT,EAAsBK,KAAtB,EAA6BC,KAA7B,EAAoCR,MAApC,CAAP;AACD,GAFD;AAGA,SAAOE,WAAP;AACD;;AAEDO,OAAOC,OAAP,GAAiBX,SAAjB","file":"transform.js","sourcesContent":["var arrayEach = require('./_arrayEach'),\n    baseCreate = require('./_baseCreate'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee'),\n    getPrototype = require('./_getPrototype'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isTypedArray = require('./isTypedArray');\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. If `accumulator` is not\n * provided, a new object with the same `[[Prototype]]` will be used. The\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 1.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * }, []);\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction transform(object, iteratee, accumulator) {\n  var isArr = isArray(object),\n      isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n  iteratee = baseIteratee(iteratee, 4);\n  if (accumulator == null) {\n    var Ctor = object && object.constructor;\n    if (isArrLike) {\n      accumulator = isArr ? new Ctor : [];\n    }\n    else if (isObject(object)) {\n      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n    }\n    else {\n      accumulator = {};\n    }\n  }\n  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = transform;\n"]}