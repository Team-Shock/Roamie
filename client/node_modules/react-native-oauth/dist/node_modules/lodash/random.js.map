{"version":3,"sources":["../../../node_modules/lodash/random.js"],"names":["baseRandom","require","isIterateeCall","toFinite","freeParseFloat","parseFloat","nativeMin","Math","min","nativeRandom","random","lower","upper","floating","undefined","temp","rand","length","module","exports"],"mappings":";;AAAA,IAAIA,aAAaC,QAAQ,eAAR,CAAjB;AAAA,IACIC,iBAAiBD,QAAQ,mBAAR,CADrB;AAAA,IAEIE,WAAWF,QAAQ,YAAR,CAFf;;AAIA;AACA,IAAIG,iBAAiBC,UAArB;;AAEA;AACA,IAAIC,YAAYC,KAAKC,GAArB;AAAA,IACIC,eAAeF,KAAKG,MADxB;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,SAASA,MAAT,CAAgBC,KAAhB,EAAuBC,KAAvB,EAA8BC,QAA9B,EAAwC;AACtC,MAAIA,YAAY,OAAOA,QAAP,IAAmB,SAA/B,IAA4CX,eAAeS,KAAf,EAAsBC,KAAtB,EAA6BC,QAA7B,CAAhD,EAAwF;AACtFD,YAAQC,WAAWC,SAAnB;AACD;AACD,MAAID,aAAaC,SAAjB,EAA4B;AAC1B,QAAI,OAAOF,KAAP,IAAgB,SAApB,EAA+B;AAC7BC,iBAAWD,KAAX;AACAA,cAAQE,SAAR;AACD,KAHD,MAIK,IAAI,OAAOH,KAAP,IAAgB,SAApB,EAA+B;AAClCE,iBAAWF,KAAX;AACAA,cAAQG,SAAR;AACD;AACF;AACD,MAAIH,UAAUG,SAAV,IAAuBF,UAAUE,SAArC,EAAgD;AAC9CH,YAAQ,CAAR;AACAC,YAAQ,CAAR;AACD,GAHD,MAIK;AACHD,YAAQR,SAASQ,KAAT,CAAR;AACA,QAAIC,UAAUE,SAAd,EAAyB;AACvBF,cAAQD,KAAR;AACAA,cAAQ,CAAR;AACD,KAHD,MAGO;AACLC,cAAQT,SAASS,KAAT,CAAR;AACD;AACF;AACD,MAAID,QAAQC,KAAZ,EAAmB;AACjB,QAAIG,OAAOJ,KAAX;AACAA,YAAQC,KAAR;AACAA,YAAQG,IAAR;AACD;AACD,MAAIF,YAAYF,QAAQ,CAApB,IAAyBC,QAAQ,CAArC,EAAwC;AACtC,QAAII,OAAOP,cAAX;AACA,WAAOH,UAAUK,QAASK,QAAQJ,QAAQD,KAAR,GAAgBP,eAAe,SAAS,CAACY,OAAO,EAAR,EAAYC,MAAZ,GAAqB,CAA9B,CAAf,CAAxB,CAAnB,EAA+FL,KAA/F,CAAP;AACD;AACD,SAAOZ,WAAWW,KAAX,EAAkBC,KAAlB,CAAP;AACD;;AAEDM,OAAOC,OAAP,GAAiBT,MAAjB","file":"random.js","sourcesContent":["var baseRandom = require('./_baseRandom'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseFloat = parseFloat;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min,\n    nativeRandom = Math.random;\n\n/**\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @memberOf _\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @example\n *\n * _.random(0, 5);\n * // => an integer between 0 and 5\n *\n * _.random(5);\n * // => also an integer between 0 and 5\n *\n * _.random(5, true);\n * // => a floating-point number between 0 and 5\n *\n * _.random(1.2, 5.2);\n * // => a floating-point number between 1.2 and 5.2\n */\nfunction random(lower, upper, floating) {\n  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n    upper = floating = undefined;\n  }\n  if (floating === undefined) {\n    if (typeof upper == 'boolean') {\n      floating = upper;\n      upper = undefined;\n    }\n    else if (typeof lower == 'boolean') {\n      floating = lower;\n      lower = undefined;\n    }\n  }\n  if (lower === undefined && upper === undefined) {\n    lower = 0;\n    upper = 1;\n  }\n  else {\n    lower = toFinite(lower);\n    if (upper === undefined) {\n      upper = lower;\n      lower = 0;\n    } else {\n      upper = toFinite(upper);\n    }\n  }\n  if (lower > upper) {\n    var temp = lower;\n    lower = upper;\n    upper = temp;\n  }\n  if (floating || lower % 1 || upper % 1) {\n    var rand = nativeRandom();\n    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n  }\n  return baseRandom(lower, upper);\n}\n\nmodule.exports = random;\n"]}