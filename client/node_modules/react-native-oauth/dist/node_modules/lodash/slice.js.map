{"version":3,"sources":["../../../node_modules/lodash/slice.js"],"names":["baseSlice","require","isIterateeCall","toInteger","slice","array","start","end","length","undefined","module","exports"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQ,cAAR,CAAhB;AAAA,IACIC,iBAAiBD,QAAQ,mBAAR,CADrB;AAAA,IAEIE,YAAYF,QAAQ,aAAR,CAFhB;;AAIA;;;;;;;;;;;;;;;;AAgBA,SAASG,KAAT,CAAeC,KAAf,EAAsBC,KAAtB,EAA6BC,GAA7B,EAAkC;AAChC,MAAIC,SAASH,SAAS,IAAT,GAAgB,CAAhB,GAAoBA,MAAMG,MAAvC;AACA,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,EAAP;AACD;AACD,MAAID,OAAO,OAAOA,GAAP,IAAc,QAArB,IAAiCL,eAAeG,KAAf,EAAsBC,KAAtB,EAA6BC,GAA7B,CAArC,EAAwE;AACtED,YAAQ,CAAR;AACAC,UAAMC,MAAN;AACD,GAHD,MAIK;AACHF,YAAQA,SAAS,IAAT,GAAgB,CAAhB,GAAoBH,UAAUG,KAAV,CAA5B;AACAC,UAAMA,QAAQE,SAAR,GAAoBD,MAApB,GAA6BL,UAAUI,GAAV,CAAnC;AACD;AACD,SAAOP,UAAUK,KAAV,EAAiBC,KAAjB,EAAwBC,GAAxB,CAAP;AACD;;AAEDG,OAAOC,OAAP,GAAiBP,KAAjB","file":"slice.js","sourcesContent":["var baseSlice = require('./_baseSlice'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toInteger = require('./toInteger');\n\n/**\n * Creates a slice of `array` from `start` up to, but not including, `end`.\n *\n * **Note:** This method is used instead of\n * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n * returned.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction slice(array, start, end) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n    start = 0;\n    end = length;\n  }\n  else {\n    start = start == null ? 0 : toInteger(start);\n    end = end === undefined ? length : toInteger(end);\n  }\n  return baseSlice(array, start, end);\n}\n\nmodule.exports = slice;\n"]}