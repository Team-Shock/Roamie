{"version":3,"sources":["../../../node_modules/lodash/_isIndex.js"],"names":["MAX_SAFE_INTEGER","reIsUint","isIndex","value","length","type","test","module","exports"],"mappings":";;;;AAAA;AACA,IAAIA,mBAAmB,gBAAvB;;AAEA;AACA,IAAIC,WAAW,kBAAf;;AAEA;;;;;;;;AAQA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,MAAIC,cAAcF,KAAd,yCAAcA,KAAd,CAAJ;AACAC,WAASA,UAAU,IAAV,GAAiBJ,gBAAjB,GAAoCI,MAA7C;;AAEA,SAAO,CAAC,CAACA,MAAF,KACJC,QAAQ,QAAR,IACEA,QAAQ,QAAR,IAAoBJ,SAASK,IAAT,CAAcH,KAAd,CAFlB,KAGAA,QAAQ,CAAC,CAAT,IAAcA,QAAQ,CAAR,IAAa,CAA3B,IAAgCA,QAAQC,MAH/C;AAID;;AAEDG,OAAOC,OAAP,GAAiBN,OAAjB","file":"_isIndex.js","sourcesContent":["/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n"]}