{"version":3,"sources":["../../../node_modules/lodash/chunk.js"],"names":["baseSlice","require","isIterateeCall","toInteger","nativeCeil","Math","ceil","nativeMax","max","chunk","array","size","guard","undefined","length","index","resIndex","result","Array","module","exports"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQ,cAAR,CAAhB;AAAA,IACIC,iBAAiBD,QAAQ,mBAAR,CADrB;AAAA,IAEIE,YAAYF,QAAQ,aAAR,CAFhB;;AAIA;AACA,IAAIG,aAAaC,KAAKC,IAAtB;AAAA,IACIC,YAAYF,KAAKG,GADrB;;AAGA;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,KAA5B,EAAmC;AACjC,MAAKA,QAAQV,eAAeQ,KAAf,EAAsBC,IAAtB,EAA4BC,KAA5B,CAAR,GAA6CD,SAASE,SAA3D,EAAuE;AACrEF,WAAO,CAAP;AACD,GAFD,MAEO;AACLA,WAAOJ,UAAUJ,UAAUQ,IAAV,CAAV,EAA2B,CAA3B,CAAP;AACD;AACD,MAAIG,SAASJ,SAAS,IAAT,GAAgB,CAAhB,GAAoBA,MAAMI,MAAvC;AACA,MAAI,CAACA,MAAD,IAAWH,OAAO,CAAtB,EAAyB;AACvB,WAAO,EAAP;AACD;AACD,MAAII,QAAQ,CAAZ;AAAA,MACIC,WAAW,CADf;AAAA,MAEIC,SAASC,MAAMd,WAAWU,SAASH,IAApB,CAAN,CAFb;;AAIA,SAAOI,QAAQD,MAAf,EAAuB;AACrBG,WAAOD,UAAP,IAAqBhB,UAAUU,KAAV,EAAiBK,KAAjB,EAAyBA,SAASJ,IAAlC,CAArB;AACD;AACD,SAAOM,MAAP;AACD;;AAEDE,OAAOC,OAAP,GAAiBX,KAAjB","file":"chunk.js","sourcesContent":["var baseSlice = require('./_baseSlice'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `array` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the new array of chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\nfunction chunk(array, size, guard) {\n  if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n    size = 1;\n  } else {\n    size = nativeMax(toInteger(size), 0);\n  }\n  var length = array == null ? 0 : array.length;\n  if (!length || size < 1) {\n    return [];\n  }\n  var index = 0,\n      resIndex = 0,\n      result = Array(nativeCeil(length / size));\n\n  while (index < length) {\n    result[resIndex++] = baseSlice(array, index, (index += size));\n  }\n  return result;\n}\n\nmodule.exports = chunk;\n"]}