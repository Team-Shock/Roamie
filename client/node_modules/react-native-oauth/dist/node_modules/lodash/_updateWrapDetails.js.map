{"version":3,"sources":["../../../node_modules/lodash/_updateWrapDetails.js"],"names":["arrayEach","require","arrayIncludes","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_FLAG","WRAP_CURRY_RIGHT_FLAG","WRAP_PARTIAL_FLAG","WRAP_PARTIAL_RIGHT_FLAG","WRAP_ARY_FLAG","WRAP_REARG_FLAG","WRAP_FLIP_FLAG","wrapFlags","updateWrapDetails","details","bitmask","pair","value","push","sort","module","exports"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQ,cAAR,CAAhB;AAAA,IACIC,gBAAgBD,QAAQ,kBAAR,CADpB;;AAGA;AACA,IAAIE,iBAAiB,CAArB;AAAA,IACIC,qBAAqB,CADzB;AAAA,IAEIC,kBAAkB,CAFtB;AAAA,IAGIC,wBAAwB,EAH5B;AAAA,IAIIC,oBAAoB,EAJxB;AAAA,IAKIC,0BAA0B,EAL9B;AAAA,IAMIC,gBAAgB,GANpB;AAAA,IAOIC,kBAAkB,GAPtB;AAAA,IAQIC,iBAAiB,GARrB;;AAUA;AACA,IAAIC,YAAY,CACd,CAAC,KAAD,EAAQH,aAAR,CADc,EAEd,CAAC,MAAD,EAASN,cAAT,CAFc,EAGd,CAAC,SAAD,EAAYC,kBAAZ,CAHc,EAId,CAAC,OAAD,EAAUC,eAAV,CAJc,EAKd,CAAC,YAAD,EAAeC,qBAAf,CALc,EAMd,CAAC,MAAD,EAASK,cAAT,CANc,EAOd,CAAC,SAAD,EAAYJ,iBAAZ,CAPc,EAQd,CAAC,cAAD,EAAiBC,uBAAjB,CARc,EASd,CAAC,OAAD,EAAUE,eAAV,CATc,CAAhB;;AAYA;;;;;;;;AAQA,SAASG,iBAAT,CAA2BC,OAA3B,EAAoCC,OAApC,EAA6C;AAC3Cf,YAAUY,SAAV,EAAqB,UAASI,IAAT,EAAe;AAClC,QAAIC,QAAQ,OAAOD,KAAK,CAAL,CAAnB;AACA,QAAKD,UAAUC,KAAK,CAAL,CAAX,IAAuB,CAACd,cAAcY,OAAd,EAAuBG,KAAvB,CAA5B,EAA2D;AACzDH,cAAQI,IAAR,CAAaD,KAAb;AACD;AACF,GALD;AAMA,SAAOH,QAAQK,IAAR,EAAP;AACD;;AAEDC,OAAOC,OAAP,GAAiBR,iBAAjB","file":"_updateWrapDetails.js","sourcesContent":["var arrayEach = require('./_arrayEach'),\n    arrayIncludes = require('./_arrayIncludes');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256,\n    WRAP_FLIP_FLAG = 512;\n\n/** Used to associate wrap methods with their bit flags. */\nvar wrapFlags = [\n  ['ary', WRAP_ARY_FLAG],\n  ['bind', WRAP_BIND_FLAG],\n  ['bindKey', WRAP_BIND_KEY_FLAG],\n  ['curry', WRAP_CURRY_FLAG],\n  ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n  ['flip', WRAP_FLIP_FLAG],\n  ['partial', WRAP_PARTIAL_FLAG],\n  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n  ['rearg', WRAP_REARG_FLAG]\n];\n\n/**\n * Updates wrapper `details` based on `bitmask` flags.\n *\n * @private\n * @returns {Array} details The details to modify.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @returns {Array} Returns `details`.\n */\nfunction updateWrapDetails(details, bitmask) {\n  arrayEach(wrapFlags, function(pair) {\n    var value = '_.' + pair[0];\n    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n      details.push(value);\n    }\n  });\n  return details.sort();\n}\n\nmodule.exports = updateWrapDetails;\n"]}