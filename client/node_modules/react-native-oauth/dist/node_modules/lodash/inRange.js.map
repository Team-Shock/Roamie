{"version":3,"sources":["../../../node_modules/lodash/inRange.js"],"names":["baseInRange","require","toFinite","toNumber","inRange","number","start","end","undefined","module","exports"],"mappings":";;AAAA,IAAIA,cAAcC,QAAQ,gBAAR,CAAlB;AAAA,IACIC,WAAWD,QAAQ,YAAR,CADf;AAAA,IAEIE,WAAWF,QAAQ,YAAR,CAFf;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,SAASG,OAAT,CAAiBC,MAAjB,EAAyBC,KAAzB,EAAgCC,GAAhC,EAAqC;AACnCD,UAAQJ,SAASI,KAAT,CAAR;AACA,MAAIC,QAAQC,SAAZ,EAAuB;AACrBD,UAAMD,KAAN;AACAA,YAAQ,CAAR;AACD,GAHD,MAGO;AACLC,UAAML,SAASK,GAAT,CAAN;AACD;AACDF,WAASF,SAASE,MAAT,CAAT;AACA,SAAOL,YAAYK,MAAZ,EAAoBC,KAApB,EAA2BC,GAA3B,CAAP;AACD;;AAEDE,OAAOC,OAAP,GAAiBN,OAAjB","file":"inRange.js","sourcesContent":["var baseInRange = require('./_baseInRange'),\n    toFinite = require('./toFinite'),\n    toNumber = require('./toNumber');\n\n/**\n * Checks if `n` is between `start` and up to, but not including, `end`. If\n * `end` is not specified, it's set to `start` with `start` then set to `0`.\n * If `start` is greater than `end` the params are swapped to support\n * negative ranges.\n *\n * @static\n * @memberOf _\n * @since 3.3.0\n * @category Number\n * @param {number} number The number to check.\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n * @see _.range, _.rangeRight\n * @example\n *\n * _.inRange(3, 2, 4);\n * // => true\n *\n * _.inRange(4, 8);\n * // => true\n *\n * _.inRange(4, 2);\n * // => false\n *\n * _.inRange(2, 2);\n * // => false\n *\n * _.inRange(1.2, 2);\n * // => true\n *\n * _.inRange(5.2, 4);\n * // => false\n *\n * _.inRange(-3, -2, -6);\n * // => true\n */\nfunction inRange(number, start, end) {\n  start = toFinite(start);\n  if (end === undefined) {\n    end = start;\n    start = 0;\n  } else {\n    end = toFinite(end);\n  }\n  number = toNumber(number);\n  return baseInRange(number, start, end);\n}\n\nmodule.exports = inRange;\n"]}