{"version":3,"sources":["../../../node_modules/lodash/_lazyValue.js"],"names":["baseWrapperValue","require","getView","isArray","LAZY_FILTER_FLAG","LAZY_MAP_FLAG","nativeMin","Math","min","lazyValue","array","__wrapped__","value","dir","__dir__","isArr","isRight","arrLength","length","view","__views__","start","end","index","iteratees","__iteratees__","iterLength","resIndex","takeCount","__takeCount__","__actions__","result","outer","iterIndex","data","iteratee","type","computed","module","exports"],"mappings":";;AAAA,IAAIA,mBAAmBC,QAAQ,qBAAR,CAAvB;AAAA,IACIC,UAAUD,QAAQ,YAAR,CADd;AAAA,IAEIE,UAAUF,QAAQ,WAAR,CAFd;;AAIA;AACA,IAAIG,mBAAmB,CAAvB;AAAA,IACIC,gBAAgB,CADpB;;AAGA;AACA,IAAIC,YAAYC,KAAKC,GAArB;;AAEA;;;;;;;;AAQA,SAASC,SAAT,GAAqB;AACnB,MAAIC,QAAQ,KAAKC,WAAL,CAAiBC,KAAjB,EAAZ;AAAA,MACIC,MAAM,KAAKC,OADf;AAAA,MAEIC,QAAQZ,QAAQO,KAAR,CAFZ;AAAA,MAGIM,UAAUH,MAAM,CAHpB;AAAA,MAIII,YAAYF,QAAQL,MAAMQ,MAAd,GAAuB,CAJvC;AAAA,MAKIC,OAAOjB,QAAQ,CAAR,EAAWe,SAAX,EAAsB,KAAKG,SAA3B,CALX;AAAA,MAMIC,QAAQF,KAAKE,KANjB;AAAA,MAOIC,MAAMH,KAAKG,GAPf;AAAA,MAQIJ,SAASI,MAAMD,KARnB;AAAA,MASIE,QAAQP,UAAUM,GAAV,GAAiBD,QAAQ,CATrC;AAAA,MAUIG,YAAY,KAAKC,aAVrB;AAAA,MAWIC,aAAaF,UAAUN,MAX3B;AAAA,MAYIS,WAAW,CAZf;AAAA,MAaIC,YAAYtB,UAAUY,MAAV,EAAkB,KAAKW,aAAvB,CAbhB;;AAeA,MAAI,CAACd,KAAD,IAAW,CAACC,OAAD,IAAYC,aAAaC,MAAzB,IAAmCU,aAAaV,MAA/D,EAAwE;AACtE,WAAOlB,iBAAiBU,KAAjB,EAAwB,KAAKoB,WAA7B,CAAP;AACD;AACD,MAAIC,SAAS,EAAb;;AAEAC,SACA,OAAOd,YAAYS,WAAWC,SAA9B,EAAyC;AACvCL,aAASV,GAAT;;AAEA,QAAIoB,YAAY,CAAC,CAAjB;AAAA,QACIrB,QAAQF,MAAMa,KAAN,CADZ;;AAGA,WAAO,EAAEU,SAAF,GAAcP,UAArB,EAAiC;AAC/B,UAAIQ,OAAOV,UAAUS,SAAV,CAAX;AAAA,UACIE,WAAWD,KAAKC,QADpB;AAAA,UAEIC,OAAOF,KAAKE,IAFhB;AAAA,UAGIC,WAAWF,SAASvB,KAAT,CAHf;;AAKA,UAAIwB,QAAQ/B,aAAZ,EAA2B;AACzBO,gBAAQyB,QAAR;AACD,OAFD,MAEO,IAAI,CAACA,QAAL,EAAe;AACpB,YAAID,QAAQhC,gBAAZ,EAA8B;AAC5B,mBAAS4B,KAAT;AACD,SAFD,MAEO;AACL,gBAAMA,KAAN;AACD;AACF;AACF;AACDD,WAAOJ,UAAP,IAAqBf,KAArB;AACD;AACD,SAAOmB,MAAP;AACD;;AAEDO,OAAOC,OAAP,GAAiB9B,SAAjB","file":"_lazyValue.js","sourcesContent":["var baseWrapperValue = require('./_baseWrapperValue'),\n    getView = require('./_getView'),\n    isArray = require('./isArray');\n\n/** Used to indicate the type of lazy iteratees. */\nvar LAZY_FILTER_FLAG = 1,\n    LAZY_MAP_FLAG = 2;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Extracts the unwrapped value from its lazy wrapper.\n *\n * @private\n * @name value\n * @memberOf LazyWrapper\n * @returns {*} Returns the unwrapped value.\n */\nfunction lazyValue() {\n  var array = this.__wrapped__.value(),\n      dir = this.__dir__,\n      isArr = isArray(array),\n      isRight = dir < 0,\n      arrLength = isArr ? array.length : 0,\n      view = getView(0, arrLength, this.__views__),\n      start = view.start,\n      end = view.end,\n      length = end - start,\n      index = isRight ? end : (start - 1),\n      iteratees = this.__iteratees__,\n      iterLength = iteratees.length,\n      resIndex = 0,\n      takeCount = nativeMin(length, this.__takeCount__);\n\n  if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n    return baseWrapperValue(array, this.__actions__);\n  }\n  var result = [];\n\n  outer:\n  while (length-- && resIndex < takeCount) {\n    index += dir;\n\n    var iterIndex = -1,\n        value = array[index];\n\n    while (++iterIndex < iterLength) {\n      var data = iteratees[iterIndex],\n          iteratee = data.iteratee,\n          type = data.type,\n          computed = iteratee(value);\n\n      if (type == LAZY_MAP_FLAG) {\n        value = computed;\n      } else if (!computed) {\n        if (type == LAZY_FILTER_FLAG) {\n          continue outer;\n        } else {\n          break outer;\n        }\n      }\n    }\n    result[resIndex++] = value;\n  }\n  return result;\n}\n\nmodule.exports = lazyValue;\n"]}