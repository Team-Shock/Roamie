{"version":3,"sources":["../../../node_modules/lodash/_equalByTag.js"],"names":["Symbol","require","Uint8Array","eq","equalArrays","mapToArray","setToArray","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","boolTag","dateTag","errorTag","mapTag","numberTag","regexpTag","setTag","stringTag","symbolTag","arrayBufferTag","dataViewTag","symbolProto","prototype","undefined","symbolValueOf","valueOf","equalByTag","object","other","tag","bitmask","customizer","equalFunc","stack","byteLength","byteOffset","buffer","name","message","convert","isPartial","size","stacked","get","set","result","call","module","exports"],"mappings":";;AAAA,IAAIA,UAASC,QAAQ,WAAR,CAAb;AAAA,IACIC,aAAaD,QAAQ,eAAR,CADjB;AAAA,IAEIE,KAAKF,QAAQ,MAAR,CAFT;AAAA,IAGIG,cAAcH,QAAQ,gBAAR,CAHlB;AAAA,IAIII,aAAaJ,QAAQ,eAAR,CAJjB;AAAA,IAKIK,aAAaL,QAAQ,eAAR,CALjB;;AAOA;AACA,IAAIM,uBAAuB,CAA3B;AAAA,IACIC,yBAAyB,CAD7B;;AAGA;AACA,IAAIC,UAAU,kBAAd;AAAA,IACIC,UAAU,eADd;AAAA,IAEIC,WAAW,gBAFf;AAAA,IAGIC,SAAS,cAHb;AAAA,IAIIC,YAAY,iBAJhB;AAAA,IAKIC,YAAY,iBALhB;AAAA,IAMIC,SAAS,cANb;AAAA,IAOIC,YAAY,iBAPhB;AAAA,IAQIC,YAAY,iBARhB;;AAUA,IAAIC,iBAAiB,sBAArB;AAAA,IACIC,cAAc,mBADlB;;AAGA;AACA,IAAIC,cAAcpB,UAASA,QAAOqB,SAAhB,GAA4BC,SAA9C;AAAA,IACIC,gBAAgBH,cAAcA,YAAYI,OAA1B,GAAoCF,SADxD;;AAGA;;;;;;;;;;;;;;;;;AAiBA,SAASG,UAAT,CAAoBC,MAApB,EAA4BC,KAA5B,EAAmCC,GAAnC,EAAwCC,OAAxC,EAAiDC,UAAjD,EAA6DC,SAA7D,EAAwEC,KAAxE,EAA+E;AAC7E,UAAQJ,GAAR;AACE,SAAKT,WAAL;AACE,UAAKO,OAAOO,UAAP,IAAqBN,MAAMM,UAA5B,IACCP,OAAOQ,UAAP,IAAqBP,MAAMO,UADhC,EAC6C;AAC3C,eAAO,KAAP;AACD;AACDR,eAASA,OAAOS,MAAhB;AACAR,cAAQA,MAAMQ,MAAd;;AAEF,SAAKjB,cAAL;AACE,UAAKQ,OAAOO,UAAP,IAAqBN,MAAMM,UAA5B,IACA,CAACF,UAAU,IAAI7B,UAAJ,CAAewB,MAAf,CAAV,EAAkC,IAAIxB,UAAJ,CAAeyB,KAAf,CAAlC,CADL,EAC+D;AAC7D,eAAO,KAAP;AACD;AACD,aAAO,IAAP;;AAEF,SAAKlB,OAAL;AACA,SAAKC,OAAL;AACA,SAAKG,SAAL;AACE;AACA;AACA,aAAOV,GAAG,CAACuB,MAAJ,EAAY,CAACC,KAAb,CAAP;;AAEF,SAAKhB,QAAL;AACE,aAAOe,OAAOU,IAAP,IAAeT,MAAMS,IAArB,IAA6BV,OAAOW,OAAP,IAAkBV,MAAMU,OAA5D;;AAEF,SAAKvB,SAAL;AACA,SAAKE,SAAL;AACE;AACA;AACA;AACA,aAAOU,UAAWC,QAAQ,EAA1B;;AAEF,SAAKf,MAAL;AACE,UAAI0B,UAAUjC,UAAd;;AAEF,SAAKU,MAAL;AACE,UAAIwB,YAAYV,UAAUtB,oBAA1B;AACA+B,kBAAYA,UAAUhC,UAAtB;;AAEA,UAAIoB,OAAOc,IAAP,IAAeb,MAAMa,IAArB,IAA6B,CAACD,SAAlC,EAA6C;AAC3C,eAAO,KAAP;AACD;AACD;AACA,UAAIE,UAAUT,MAAMU,GAAN,CAAUhB,MAAV,CAAd;AACA,UAAIe,OAAJ,EAAa;AACX,eAAOA,WAAWd,KAAlB;AACD;AACDE,iBAAWrB,sBAAX;;AAEA;AACAwB,YAAMW,GAAN,CAAUjB,MAAV,EAAkBC,KAAlB;AACA,UAAIiB,SAASxC,YAAYkC,QAAQZ,MAAR,CAAZ,EAA6BY,QAAQX,KAAR,CAA7B,EAA6CE,OAA7C,EAAsDC,UAAtD,EAAkEC,SAAlE,EAA6EC,KAA7E,CAAb;AACAA,YAAM,QAAN,EAAgBN,MAAhB;AACA,aAAOkB,MAAP;;AAEF,SAAK3B,SAAL;AACE,UAAIM,aAAJ,EAAmB;AACjB,eAAOA,cAAcsB,IAAd,CAAmBnB,MAAnB,KAA8BH,cAAcsB,IAAd,CAAmBlB,KAAnB,CAArC;AACD;AA3DL;AA6DA,SAAO,KAAP;AACD;;AAEDmB,OAAOC,OAAP,GAAiBtB,UAAjB","file":"_equalByTag.js","sourcesContent":["var Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n"]}