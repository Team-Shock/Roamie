{"version":3,"sources":["../../../node_modules/lodash/remove.js"],"names":["baseIteratee","require","basePullAt","remove","array","predicate","result","length","index","indexes","value","push","module","exports"],"mappings":";;AAAA,IAAIA,eAAeC,QAAQ,iBAAR,CAAnB;AAAA,IACIC,aAAaD,QAAQ,eAAR,CADjB;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,SAASE,MAAT,CAAgBC,KAAhB,EAAuBC,SAAvB,EAAkC;AAChC,MAAIC,SAAS,EAAb;AACA,MAAI,EAAEF,SAASA,MAAMG,MAAjB,CAAJ,EAA8B;AAC5B,WAAOD,MAAP;AACD;AACD,MAAIE,QAAQ,CAAC,CAAb;AAAA,MACIC,UAAU,EADd;AAAA,MAEIF,SAASH,MAAMG,MAFnB;;AAIAF,cAAYL,aAAaK,SAAb,EAAwB,CAAxB,CAAZ;AACA,SAAO,EAAEG,KAAF,GAAUD,MAAjB,EAAyB;AACvB,QAAIG,QAAQN,MAAMI,KAAN,CAAZ;AACA,QAAIH,UAAUK,KAAV,EAAiBF,KAAjB,EAAwBJ,KAAxB,CAAJ,EAAoC;AAClCE,aAAOK,IAAP,CAAYD,KAAZ;AACAD,cAAQE,IAAR,CAAaH,KAAb;AACD;AACF;AACDN,aAAWE,KAAX,EAAkBK,OAAlB;AACA,SAAOH,MAAP;AACD;;AAEDM,OAAOC,OAAP,GAAiBV,MAAjB","file":"remove.js","sourcesContent":["var baseIteratee = require('./_baseIteratee'),\n    basePullAt = require('./_basePullAt');\n\n/**\n * Removes all elements from `array` that `predicate` returns truthy for\n * and returns an array of the removed elements. The predicate is invoked\n * with three arguments: (value, index, array).\n *\n * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n * to pull elements from an array by value.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new array of removed elements.\n * @example\n *\n * var array = [1, 2, 3, 4];\n * var evens = _.remove(array, function(n) {\n *   return n % 2 == 0;\n * });\n *\n * console.log(array);\n * // => [1, 3]\n *\n * console.log(evens);\n * // => [2, 4]\n */\nfunction remove(array, predicate) {\n  var result = [];\n  if (!(array && array.length)) {\n    return result;\n  }\n  var index = -1,\n      indexes = [],\n      length = array.length;\n\n  predicate = baseIteratee(predicate, 3);\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result.push(value);\n      indexes.push(index);\n    }\n  }\n  basePullAt(array, indexes);\n  return result;\n}\n\nmodule.exports = remove;\n"]}