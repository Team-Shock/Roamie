{"version":3,"sources":["../../../node_modules/lodash/mixin.js"],"names":["arrayEach","require","arrayPush","baseFunctions","copyArray","isFunction","isObject","keys","mixin","object","source","options","props","methodNames","chain","isFunc","methodName","func","prototype","chainAll","__chain__","result","__wrapped__","actions","__actions__","push","arguments","apply","value","module","exports"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQ,cAAR,CAAhB;AAAA,IACIC,YAAYD,QAAQ,cAAR,CADhB;AAAA,IAEIE,gBAAgBF,QAAQ,kBAAR,CAFpB;AAAA,IAGIG,YAAYH,QAAQ,cAAR,CAHhB;AAAA,IAIII,aAAaJ,QAAQ,cAAR,CAJjB;AAAA,IAKIK,WAAWL,QAAQ,YAAR,CALf;AAAA,IAMIM,OAAON,QAAQ,QAAR,CANX;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,SAASO,KAAT,CAAeC,MAAf,EAAuBC,MAAvB,EAA+BC,OAA/B,EAAwC;AACtC,MAAIC,QAAQL,KAAKG,MAAL,CAAZ;AAAA,MACIG,cAAcV,cAAcO,MAAd,EAAsBE,KAAtB,CADlB;;AAGA,MAAIE,QAAQ,EAAER,SAASK,OAAT,KAAqB,WAAWA,OAAlC,KAA8C,CAAC,CAACA,QAAQG,KAApE;AAAA,MACIC,SAASV,WAAWI,MAAX,CADb;;AAGAT,YAAUa,WAAV,EAAuB,UAASG,UAAT,EAAqB;AAC1C,QAAIC,OAAOP,OAAOM,UAAP,CAAX;AACAP,WAAOO,UAAP,IAAqBC,IAArB;AACA,QAAIF,MAAJ,EAAY;AACVN,aAAOS,SAAP,CAAiBF,UAAjB,IAA+B,YAAW;AACxC,YAAIG,WAAW,KAAKC,SAApB;AACA,YAAIN,SAASK,QAAb,EAAuB;AACrB,cAAIE,SAASZ,OAAO,KAAKa,WAAZ,CAAb;AAAA,cACIC,UAAUF,OAAOG,WAAP,GAAqBpB,UAAU,KAAKoB,WAAf,CADnC;;AAGAD,kBAAQE,IAAR,CAAa,EAAE,QAAQR,IAAV,EAAgB,QAAQS,SAAxB,EAAmC,WAAWjB,MAA9C,EAAb;AACAY,iBAAOD,SAAP,GAAmBD,QAAnB;AACA,iBAAOE,MAAP;AACD;AACD,eAAOJ,KAAKU,KAAL,CAAWlB,MAAX,EAAmBP,UAAU,CAAC,KAAK0B,KAAL,EAAD,CAAV,EAA0BF,SAA1B,CAAnB,CAAP;AACD,OAXD;AAYD;AACF,GAjBD;;AAmBA,SAAOjB,MAAP;AACD;;AAEDoB,OAAOC,OAAP,GAAiBtB,KAAjB","file":"mixin.js","sourcesContent":["var arrayEach = require('./_arrayEach'),\n    arrayPush = require('./_arrayPush'),\n    baseFunctions = require('./_baseFunctions'),\n    copyArray = require('./_copyArray'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    keys = require('./keys');\n\n/**\n * Adds all own enumerable string keyed function properties of a source\n * object to the destination object. If `object` is a function, then methods\n * are added to its prototype as well.\n *\n * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n * avoid conflicts caused by modifying the original.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {Function|Object} [object=lodash] The destination object.\n * @param {Object} source The object of functions to add.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n * @returns {Function|Object} Returns `object`.\n * @example\n *\n * function vowels(string) {\n *   return _.filter(string, function(v) {\n *     return /[aeiou]/i.test(v);\n *   });\n * }\n *\n * _.mixin({ 'vowels': vowels });\n * _.vowels('fred');\n * // => ['e']\n *\n * _('fred').vowels().value();\n * // => ['e']\n *\n * _.mixin({ 'vowels': vowels }, { 'chain': false });\n * _('fred').vowels();\n * // => ['e']\n */\nfunction mixin(object, source, options) {\n  var props = keys(source),\n      methodNames = baseFunctions(source, props);\n\n  var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n      isFunc = isFunction(object);\n\n  arrayEach(methodNames, function(methodName) {\n    var func = source[methodName];\n    object[methodName] = func;\n    if (isFunc) {\n      object.prototype[methodName] = function() {\n        var chainAll = this.__chain__;\n        if (chain || chainAll) {\n          var result = object(this.__wrapped__),\n              actions = result.__actions__ = copyArray(this.__actions__);\n\n          actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n          result.__chain__ = chainAll;\n          return result;\n        }\n        return func.apply(object, arrayPush([this.value()], arguments));\n      };\n    }\n  });\n\n  return object;\n}\n\nmodule.exports = mixin;\n"]}