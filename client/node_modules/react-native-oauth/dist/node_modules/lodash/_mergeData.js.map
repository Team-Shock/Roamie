{"version":3,"sources":["../../../node_modules/lodash/_mergeData.js"],"names":["composeArgs","require","composeArgsRight","replaceHolders","PLACEHOLDER","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_BOUND_FLAG","WRAP_CURRY_FLAG","WRAP_ARY_FLAG","WRAP_REARG_FLAG","nativeMin","Math","min","mergeData","data","source","bitmask","srcBitmask","newBitmask","isCommon","isCombo","length","value","partials","module","exports"],"mappings":";;AAAA,IAAIA,cAAcC,QAAQ,gBAAR,CAAlB;AAAA,IACIC,mBAAmBD,QAAQ,qBAAR,CADvB;AAAA,IAEIE,iBAAiBF,QAAQ,mBAAR,CAFrB;;AAIA;AACA,IAAIG,cAAc,wBAAlB;;AAEA;AACA,IAAIC,iBAAiB,CAArB;AAAA,IACIC,qBAAqB,CADzB;AAAA,IAEIC,wBAAwB,CAF5B;AAAA,IAGIC,kBAAkB,CAHtB;AAAA,IAIIC,gBAAgB,GAJpB;AAAA,IAKIC,kBAAkB,GALtB;;AAOA;AACA,IAAIC,YAAYC,KAAKC,GAArB;;AAEA;;;;;;;;;;;;;;;;AAgBA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,MAAzB,EAAiC;AAC/B,MAAIC,UAAUF,KAAK,CAAL,CAAd;AAAA,MACIG,aAAaF,OAAO,CAAP,CADjB;AAAA,MAEIG,aAAaF,UAAUC,UAF3B;AAAA,MAGIE,WAAWD,cAAcd,iBAAiBC,kBAAjB,GAAsCG,aAApD,CAHf;;AAKA,MAAIY,UACAH,cAAcT,aAAf,IAAkCQ,WAAWT,eAA9C,IACEU,cAAcT,aAAf,IAAkCQ,WAAWP,eAA7C,IAAkEK,KAAK,CAAL,EAAQO,MAAR,IAAkBN,OAAO,CAAP,CADrF,IAEEE,eAAeT,gBAAgBC,eAA/B,CAAD,IAAsDM,OAAO,CAAP,EAAUM,MAAV,IAAoBN,OAAO,CAAP,CAA1E,IAAyFC,WAAWT,eAHvG;;AAKA;AACA,MAAI,EAAEY,YAAYC,OAAd,CAAJ,EAA4B;AAC1B,WAAON,IAAP;AACD;AACD;AACA,MAAIG,aAAab,cAAjB,EAAiC;AAC/BU,SAAK,CAAL,IAAUC,OAAO,CAAP,CAAV;AACA;AACAG,kBAAcF,UAAUZ,cAAV,GAA2B,CAA3B,GAA+BE,qBAA7C;AACD;AACD;AACA,MAAIgB,QAAQP,OAAO,CAAP,CAAZ;AACA,MAAIO,KAAJ,EAAW;AACT,QAAIC,WAAWT,KAAK,CAAL,CAAf;AACAA,SAAK,CAAL,IAAUS,WAAWxB,YAAYwB,QAAZ,EAAsBD,KAAtB,EAA6BP,OAAO,CAAP,CAA7B,CAAX,GAAqDO,KAA/D;AACAR,SAAK,CAAL,IAAUS,WAAWrB,eAAeY,KAAK,CAAL,CAAf,EAAwBX,WAAxB,CAAX,GAAkDY,OAAO,CAAP,CAA5D;AACD;AACD;AACAO,UAAQP,OAAO,CAAP,CAAR;AACA,MAAIO,KAAJ,EAAW;AACTC,eAAWT,KAAK,CAAL,CAAX;AACAA,SAAK,CAAL,IAAUS,WAAWtB,iBAAiBsB,QAAjB,EAA2BD,KAA3B,EAAkCP,OAAO,CAAP,CAAlC,CAAX,GAA0DO,KAApE;AACAR,SAAK,CAAL,IAAUS,WAAWrB,eAAeY,KAAK,CAAL,CAAf,EAAwBX,WAAxB,CAAX,GAAkDY,OAAO,CAAP,CAA5D;AACD;AACD;AACAO,UAAQP,OAAO,CAAP,CAAR;AACA,MAAIO,KAAJ,EAAW;AACTR,SAAK,CAAL,IAAUQ,KAAV;AACD;AACD;AACA,MAAIL,aAAaT,aAAjB,EAAgC;AAC9BM,SAAK,CAAL,IAAUA,KAAK,CAAL,KAAW,IAAX,GAAkBC,OAAO,CAAP,CAAlB,GAA8BL,UAAUI,KAAK,CAAL,CAAV,EAAmBC,OAAO,CAAP,CAAnB,CAAxC;AACD;AACD;AACA,MAAID,KAAK,CAAL,KAAW,IAAf,EAAqB;AACnBA,SAAK,CAAL,IAAUC,OAAO,CAAP,CAAV;AACD;AACD;AACAD,OAAK,CAAL,IAAUC,OAAO,CAAP,CAAV;AACAD,OAAK,CAAL,IAAUI,UAAV;;AAEA,SAAOJ,IAAP;AACD;;AAEDU,OAAOC,OAAP,GAAiBZ,SAAjB","file":"_mergeData.js","sourcesContent":["var composeArgs = require('./_composeArgs'),\n    composeArgsRight = require('./_composeArgsRight'),\n    replaceHolders = require('./_replaceHolders');\n\n/** Used as the internal argument placeholder. */\nvar PLACEHOLDER = '__lodash_placeholder__';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_BOUND_FLAG = 4,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Merges the function metadata of `source` into `data`.\n *\n * Merging metadata reduces the number of wrappers used to invoke a function.\n * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n * may be applied regardless of execution order. Methods like `_.ary` and\n * `_.rearg` modify function arguments, making the order in which they are\n * executed important, preventing the merging of metadata. However, we make\n * an exception for a safe combined case where curried functions have `_.ary`\n * and or `_.rearg` applied.\n *\n * @private\n * @param {Array} data The destination metadata.\n * @param {Array} source The source metadata.\n * @returns {Array} Returns `data`.\n */\nfunction mergeData(data, source) {\n  var bitmask = data[1],\n      srcBitmask = source[1],\n      newBitmask = bitmask | srcBitmask,\n      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n  var isCombo =\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n  // Exit early if metadata can't be merged.\n  if (!(isCommon || isCombo)) {\n    return data;\n  }\n  // Use source `thisArg` if available.\n  if (srcBitmask & WRAP_BIND_FLAG) {\n    data[2] = source[2];\n    // Set when currying a bound function.\n    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n  }\n  // Compose partial arguments.\n  var value = source[3];\n  if (value) {\n    var partials = data[3];\n    data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n  }\n  // Compose partial right arguments.\n  value = source[5];\n  if (value) {\n    partials = data[5];\n    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n  }\n  // Use source `argPos` if available.\n  value = source[7];\n  if (value) {\n    data[7] = value;\n  }\n  // Use source `ary` if it's smaller.\n  if (srcBitmask & WRAP_ARY_FLAG) {\n    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n  }\n  // Use source `arity` if one is not provided.\n  if (data[9] == null) {\n    data[9] = source[9];\n  }\n  // Use source `func` and merge bitmasks.\n  data[0] = source[0];\n  data[1] = newBitmask;\n\n  return data;\n}\n\nmodule.exports = mergeData;\n"]}