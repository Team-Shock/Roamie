{"version":3,"sources":["../../../node_modules/lodash/isNumber.js"],"names":["baseGetTag","require","isObjectLike","numberTag","isNumber","value","module","exports"],"mappings":";;AAAA,IAAIA,aAAaC,QAAQ,eAAR,CAAjB;AAAA,IACIC,eAAeD,QAAQ,gBAAR,CADnB;;AAGA;AACA,IAAIE,YAAY,iBAAhB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,WAAO,OAAOA,KAAP,IAAgB,QAAhB,IACJH,aAAaG,KAAb,KAAuBL,WAAWK,KAAX,KAAqBF,SAD/C;AAED;;AAEDG,OAAOC,OAAP,GAAiBH,QAAjB","file":"isNumber.js","sourcesContent":["var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n"]}