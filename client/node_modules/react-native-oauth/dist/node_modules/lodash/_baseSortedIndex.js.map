{"version":3,"sources":["../../../node_modules/lodash/_baseSortedIndex.js"],"names":["baseSortedIndexBy","require","identity","isSymbol","MAX_ARRAY_LENGTH","HALF_MAX_ARRAY_LENGTH","baseSortedIndex","array","value","retHighest","low","high","length","mid","computed","module","exports"],"mappings":";;AAAA,IAAIA,oBAAoBC,QAAQ,sBAAR,CAAxB;AAAA,IACIC,WAAWD,QAAQ,YAAR,CADf;AAAA,IAEIE,WAAWF,QAAQ,YAAR,CAFf;;AAIA;AACA,IAAIG,mBAAmB,UAAvB;AAAA,IACIC,wBAAwBD,qBAAqB,CADjD;;AAGA;;;;;;;;;;;;AAYA,SAASE,eAAT,CAAyBC,KAAzB,EAAgCC,KAAhC,EAAuCC,UAAvC,EAAmD;AACjD,MAAIC,MAAM,CAAV;AAAA,MACIC,OAAOJ,SAAS,IAAT,GAAgBG,GAAhB,GAAsBH,MAAMK,MADvC;;AAGA,MAAI,OAAOJ,KAAP,IAAgB,QAAhB,IAA4BA,UAAUA,KAAtC,IAA+CG,QAAQN,qBAA3D,EAAkF;AAChF,WAAOK,MAAMC,IAAb,EAAmB;AACjB,UAAIE,MAAOH,MAAMC,IAAP,KAAiB,CAA3B;AAAA,UACIG,WAAWP,MAAMM,GAAN,CADf;;AAGA,UAAIC,aAAa,IAAb,IAAqB,CAACX,SAASW,QAAT,CAAtB,KACCL,aAAcK,YAAYN,KAA1B,GAAoCM,WAAWN,KADhD,CAAJ,EAC6D;AAC3DE,cAAMG,MAAM,CAAZ;AACD,OAHD,MAGO;AACLF,eAAOE,GAAP;AACD;AACF;AACD,WAAOF,IAAP;AACD;AACD,SAAOX,kBAAkBO,KAAlB,EAAyBC,KAAzB,EAAgCN,QAAhC,EAA0CO,UAA1C,CAAP;AACD;;AAEDM,OAAOC,OAAP,GAAiBV,eAAjB","file":"_baseSortedIndex.js","sourcesContent":["var baseSortedIndexBy = require('./_baseSortedIndexBy'),\n    identity = require('./identity'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n/**\n * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n * performs a binary search of `array` to determine the index at which `value`\n * should be inserted into `array` in order to maintain its sort order.\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\nfunction baseSortedIndex(array, value, retHighest) {\n  var low = 0,\n      high = array == null ? low : array.length;\n\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n    while (low < high) {\n      var mid = (low + high) >>> 1,\n          computed = array[mid];\n\n      if (computed !== null && !isSymbol(computed) &&\n          (retHighest ? (computed <= value) : (computed < value))) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return high;\n  }\n  return baseSortedIndexBy(array, value, identity, retHighest);\n}\n\nmodule.exports = baseSortedIndex;\n"]}