{"version":3,"sources":["../../../node_modules/lodash/_baseClone.js"],"names":["Stack","require","arrayEach","assignValue","baseAssign","baseAssignIn","cloneBuffer","copyArray","copySymbols","copySymbolsIn","getAllKeys","getAllKeysIn","getTag","initCloneArray","initCloneByTag","initCloneObject","isArray","isBuffer","isMap","isObject","isSet","keys","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","argsTag","arrayTag","boolTag","dateTag","errorTag","funcTag","genTag","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","cloneableTags","baseClone","value","bitmask","customizer","key","object","stack","result","isDeep","isFlat","isFull","undefined","isArr","tag","isFunc","stacked","get","set","forEach","subValue","add","keysFunc","keysIn","props","module","exports"],"mappings":"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","file":"_baseClone.js","sourcesContent":["var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n\n    return result;\n  }\n\n  if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n\n    return result;\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n"]}