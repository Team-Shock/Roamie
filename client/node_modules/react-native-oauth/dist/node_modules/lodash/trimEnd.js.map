{"version":3,"sources":["../../../node_modules/lodash/trimEnd.js"],"names":["baseToString","require","castSlice","charsEndIndex","stringToArray","toString","reTrimEnd","trimEnd","string","chars","guard","undefined","replace","strSymbols","end","join","module","exports"],"mappings":";;AAAA,IAAIA,eAAeC,QAAQ,iBAAR,CAAnB;AAAA,IACIC,YAAYD,QAAQ,cAAR,CADhB;AAAA,IAEIE,gBAAgBF,QAAQ,kBAAR,CAFpB;AAAA,IAGIG,gBAAgBH,QAAQ,kBAAR,CAHpB;AAAA,IAIII,WAAWJ,QAAQ,YAAR,CAJf;;AAMA;AACA,IAAIK,YAAY,MAAhB;;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,KAAzB,EAAgCC,KAAhC,EAAuC;AACrCF,WAASH,SAASG,MAAT,CAAT;AACA,MAAIA,WAAWE,SAASD,UAAUE,SAA9B,CAAJ,EAA8C;AAC5C,WAAOH,OAAOI,OAAP,CAAeN,SAAf,EAA0B,EAA1B,CAAP;AACD;AACD,MAAI,CAACE,MAAD,IAAW,EAAEC,QAAQT,aAAaS,KAAb,CAAV,CAAf,EAA+C;AAC7C,WAAOD,MAAP;AACD;AACD,MAAIK,aAAaT,cAAcI,MAAd,CAAjB;AAAA,MACIM,MAAMX,cAAcU,UAAd,EAA0BT,cAAcK,KAAd,CAA1B,IAAkD,CAD5D;;AAGA,SAAOP,UAAUW,UAAV,EAAsB,CAAtB,EAAyBC,GAAzB,EAA8BC,IAA9B,CAAmC,EAAnC,CAAP;AACD;;AAEDC,OAAOC,OAAP,GAAiBV,OAAjB","file":"trimEnd.js","sourcesContent":["var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    charsEndIndex = require('./_charsEndIndex'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used to match leading and trailing whitespace. */\nvar reTrimEnd = /\\s+$/;\n\n/**\n * Removes trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trimEnd('  abc  ');\n * // => '  abc'\n *\n * _.trimEnd('-_-abc-_-', '_-');\n * // => '-_-abc'\n */\nfunction trimEnd(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrimEnd, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n  return castSlice(strSymbols, 0, end).join('');\n}\n\nmodule.exports = trimEnd;\n"]}