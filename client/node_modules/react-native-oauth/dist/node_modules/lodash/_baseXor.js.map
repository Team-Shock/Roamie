{"version":3,"sources":["../../../node_modules/lodash/_baseXor.js"],"names":["baseDifference","require","baseFlatten","baseUniq","baseXor","arrays","iteratee","comparator","length","index","result","Array","array","othIndex","module","exports"],"mappings":";;AAAA,IAAIA,iBAAiBC,QAAQ,mBAAR,CAArB;AAAA,IACIC,cAAcD,QAAQ,gBAAR,CADlB;AAAA,IAEIE,WAAWF,QAAQ,aAAR,CAFf;;AAIA;;;;;;;;;;AAUA,SAASG,OAAT,CAAiBC,MAAjB,EAAyBC,QAAzB,EAAmCC,UAAnC,EAA+C;AAC7C,MAAIC,SAASH,OAAOG,MAApB;AACA,MAAIA,SAAS,CAAb,EAAgB;AACd,WAAOA,SAASL,SAASE,OAAO,CAAP,CAAT,CAAT,GAA+B,EAAtC;AACD;AACD,MAAII,QAAQ,CAAC,CAAb;AAAA,MACIC,SAASC,MAAMH,MAAN,CADb;;AAGA,SAAO,EAAEC,KAAF,GAAUD,MAAjB,EAAyB;AACvB,QAAII,QAAQP,OAAOI,KAAP,CAAZ;AAAA,QACII,WAAW,CAAC,CADhB;;AAGA,WAAO,EAAEA,QAAF,GAAaL,MAApB,EAA4B;AAC1B,UAAIK,YAAYJ,KAAhB,EAAuB;AACrBC,eAAOD,KAAP,IAAgBT,eAAeU,OAAOD,KAAP,KAAiBG,KAAhC,EAAuCP,OAAOQ,QAAP,CAAvC,EAAyDP,QAAzD,EAAmEC,UAAnE,CAAhB;AACD;AACF;AACF;AACD,SAAOJ,SAASD,YAAYQ,MAAZ,EAAoB,CAApB,CAAT,EAAiCJ,QAAjC,EAA2CC,UAA3C,CAAP;AACD;;AAEDO,OAAOC,OAAP,GAAiBX,OAAjB","file":"_baseXor.js","sourcesContent":["var baseDifference = require('./_baseDifference'),\n    baseFlatten = require('./_baseFlatten'),\n    baseUniq = require('./_baseUniq');\n\n/**\n * The base implementation of methods like `_.xor`, without support for\n * iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of values.\n */\nfunction baseXor(arrays, iteratee, comparator) {\n  var length = arrays.length;\n  if (length < 2) {\n    return length ? baseUniq(arrays[0]) : [];\n  }\n  var index = -1,\n      result = Array(length);\n\n  while (++index < length) {\n    var array = arrays[index],\n        othIndex = -1;\n\n    while (++othIndex < length) {\n      if (othIndex != index) {\n        result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n      }\n    }\n  }\n  return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n}\n\nmodule.exports = baseXor;\n"]}