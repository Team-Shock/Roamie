{"version":3,"sources":["../../../node_modules/lodash/_createWrap.js"],"names":["baseSetData","require","createBind","createCurry","createHybrid","createPartial","getData","mergeData","setData","setWrapToString","toInteger","FUNC_ERROR_TEXT","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_FLAG","WRAP_CURRY_RIGHT_FLAG","WRAP_PARTIAL_FLAG","WRAP_PARTIAL_RIGHT_FLAG","nativeMax","Math","max","createWrap","func","bitmask","thisArg","partials","holders","argPos","ary","arity","isBindKey","TypeError","length","undefined","partialsRight","holdersRight","data","newData","result","apply","setter","module","exports"],"mappings":"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","file":"_createWrap.js","sourcesContent":["var baseSetData = require('./_baseSetData'),\n    createBind = require('./_createBind'),\n    createCurry = require('./_createCurry'),\n    createHybrid = require('./_createHybrid'),\n    createPartial = require('./_createPartial'),\n    getData = require('./_getData'),\n    mergeData = require('./_mergeData'),\n    setData = require('./_setData'),\n    setWrapToString = require('./_setWrapToString'),\n    toInteger = require('./toInteger');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that either curries or invokes `func` with optional\n * `this` binding and partially applied arguments.\n *\n * @private\n * @param {Function|string} func The function or method name to wrap.\n * @param {number} bitmask The bitmask flags.\n *    1 - `_.bind`\n *    2 - `_.bindKey`\n *    4 - `_.curry` or `_.curryRight` of a bound function\n *    8 - `_.curry`\n *   16 - `_.curryRight`\n *   32 - `_.partial`\n *   64 - `_.partialRight`\n *  128 - `_.rearg`\n *  256 - `_.ary`\n *  512 - `_.flip`\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to be partially applied.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n  if (!isBindKey && typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var length = partials ? partials.length : 0;\n  if (!length) {\n    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n    partials = holders = undefined;\n  }\n  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n  arity = arity === undefined ? arity : toInteger(arity);\n  length -= holders ? holders.length : 0;\n\n  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n    var partialsRight = partials,\n        holdersRight = holders;\n\n    partials = holders = undefined;\n  }\n  var data = isBindKey ? undefined : getData(func);\n\n  var newData = [\n    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n    argPos, ary, arity\n  ];\n\n  if (data) {\n    mergeData(newData, data);\n  }\n  func = newData[0];\n  bitmask = newData[1];\n  thisArg = newData[2];\n  partials = newData[3];\n  holders = newData[4];\n  arity = newData[9] = newData[9] === undefined\n    ? (isBindKey ? 0 : func.length)\n    : nativeMax(newData[9] - length, 0);\n\n  if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n  }\n  if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n    var result = createBind(func, bitmask, thisArg);\n  } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n    result = createCurry(func, bitmask, arity);\n  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n    result = createPartial(func, bitmask, thisArg, partials);\n  } else {\n    result = createHybrid.apply(undefined, newData);\n  }\n  var setter = data ? baseSetData : setData;\n  return setWrapToString(setter(result, newData), func, bitmask);\n}\n\nmodule.exports = createWrap;\n"]}