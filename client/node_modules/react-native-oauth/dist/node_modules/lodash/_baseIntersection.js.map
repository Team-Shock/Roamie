{"version":3,"sources":["../../../node_modules/lodash/_baseIntersection.js"],"names":["SetCache","require","arrayIncludes","arrayIncludesWith","arrayMap","baseUnary","cacheHas","nativeMin","Math","min","baseIntersection","arrays","iteratee","comparator","includes","length","othLength","othIndex","caches","Array","maxLength","Infinity","result","array","undefined","index","seen","outer","value","computed","cache","push","module","exports"],"mappings":";;AAAA,IAAIA,WAAWC,QAAQ,aAAR,CAAf;AAAA,IACIC,gBAAgBD,QAAQ,kBAAR,CADpB;AAAA,IAEIE,oBAAoBF,QAAQ,sBAAR,CAFxB;AAAA,IAGIG,WAAWH,QAAQ,aAAR,CAHf;AAAA,IAIII,YAAYJ,QAAQ,cAAR,CAJhB;AAAA,IAKIK,WAAWL,QAAQ,aAAR,CALf;;AAOA;AACA,IAAIM,YAAYC,KAAKC,GAArB;;AAEA;;;;;;;;;;AAUA,SAASC,gBAAT,CAA0BC,MAA1B,EAAkCC,QAAlC,EAA4CC,UAA5C,EAAwD;AACtD,MAAIC,WAAWD,aAAaV,iBAAb,GAAiCD,aAAhD;AAAA,MACIa,SAASJ,OAAO,CAAP,EAAUI,MADvB;AAAA,MAEIC,YAAYL,OAAOI,MAFvB;AAAA,MAGIE,WAAWD,SAHf;AAAA,MAIIE,SAASC,MAAMH,SAAN,CAJb;AAAA,MAKII,YAAYC,QALhB;AAAA,MAMIC,SAAS,EANb;;AAQA,SAAOL,UAAP,EAAmB;AACjB,QAAIM,QAAQZ,OAAOM,QAAP,CAAZ;AACA,QAAIA,YAAYL,QAAhB,EAA0B;AACxBW,cAAQnB,SAASmB,KAAT,EAAgBlB,UAAUO,QAAV,CAAhB,CAAR;AACD;AACDQ,gBAAYb,UAAUgB,MAAMR,MAAhB,EAAwBK,SAAxB,CAAZ;AACAF,WAAOD,QAAP,IAAmB,CAACJ,UAAD,KAAgBD,YAAaG,UAAU,GAAV,IAAiBQ,MAAMR,MAAN,IAAgB,GAA9D,IACf,IAAIf,QAAJ,CAAaiB,YAAYM,KAAzB,CADe,GAEfC,SAFJ;AAGD;AACDD,UAAQZ,OAAO,CAAP,CAAR;;AAEA,MAAIc,QAAQ,CAAC,CAAb;AAAA,MACIC,OAAOR,OAAO,CAAP,CADX;;AAGAS,SACA,OAAO,EAAEF,KAAF,GAAUV,MAAV,IAAoBO,OAAOP,MAAP,GAAgBK,SAA3C,EAAsD;AACpD,QAAIQ,QAAQL,MAAME,KAAN,CAAZ;AAAA,QACII,WAAWjB,WAAWA,SAASgB,KAAT,CAAX,GAA6BA,KAD5C;;AAGAA,YAASf,cAAce,UAAU,CAAzB,GAA8BA,KAA9B,GAAsC,CAA9C;AACA,QAAI,EAAEF,OACEpB,SAASoB,IAAT,EAAeG,QAAf,CADF,GAEEf,SAASQ,MAAT,EAAiBO,QAAjB,EAA2BhB,UAA3B,CAFJ,CAAJ,EAGO;AACLI,iBAAWD,SAAX;AACA,aAAO,EAAEC,QAAT,EAAmB;AACjB,YAAIa,QAAQZ,OAAOD,QAAP,CAAZ;AACA,YAAI,EAAEa,QACExB,SAASwB,KAAT,EAAgBD,QAAhB,CADF,GAEEf,SAASH,OAAOM,QAAP,CAAT,EAA2BY,QAA3B,EAAqChB,UAArC,CAFJ,CAAJ,EAGM;AACJ,mBAASc,KAAT;AACD;AACF;AACD,UAAID,IAAJ,EAAU;AACRA,aAAKK,IAAL,CAAUF,QAAV;AACD;AACDP,aAAOS,IAAP,CAAYH,KAAZ;AACD;AACF;AACD,SAAON,MAAP;AACD;;AAEDU,OAAOC,OAAP,GAAiBvB,gBAAjB","file":"_baseIntersection.js","sourcesContent":["var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    arrayMap = require('./_arrayMap'),\n    baseUnary = require('./_baseUnary'),\n    cacheHas = require('./_cacheHas');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * The base implementation of methods like `_.intersection`, without support\n * for iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of shared values.\n */\nfunction baseIntersection(arrays, iteratee, comparator) {\n  var includes = comparator ? arrayIncludesWith : arrayIncludes,\n      length = arrays[0].length,\n      othLength = arrays.length,\n      othIndex = othLength,\n      caches = Array(othLength),\n      maxLength = Infinity,\n      result = [];\n\n  while (othIndex--) {\n    var array = arrays[othIndex];\n    if (othIndex && iteratee) {\n      array = arrayMap(array, baseUnary(iteratee));\n    }\n    maxLength = nativeMin(array.length, maxLength);\n    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n      ? new SetCache(othIndex && array)\n      : undefined;\n  }\n  array = arrays[0];\n\n  var index = -1,\n      seen = caches[0];\n\n  outer:\n  while (++index < length && result.length < maxLength) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (!(seen\n          ? cacheHas(seen, computed)\n          : includes(result, computed, comparator)\n        )) {\n      othIndex = othLength;\n      while (--othIndex) {\n        var cache = caches[othIndex];\n        if (!(cache\n              ? cacheHas(cache, computed)\n              : includes(arrays[othIndex], computed, comparator))\n            ) {\n          continue outer;\n        }\n      }\n      if (seen) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseIntersection;\n"]}