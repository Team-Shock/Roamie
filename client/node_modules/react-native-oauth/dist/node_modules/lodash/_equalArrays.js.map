{"version":3,"sources":["../../../node_modules/lodash/_equalArrays.js"],"names":["SetCache","require","arraySome","cacheHas","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","equalArrays","array","other","bitmask","customizer","equalFunc","stack","isPartial","arrLength","length","othLength","stacked","get","index","result","seen","undefined","set","arrValue","othValue","compared","othIndex","push","module","exports"],"mappings":";;AAAA,IAAIA,WAAWC,QAAQ,aAAR,CAAf;AAAA,IACIC,YAAYD,QAAQ,cAAR,CADhB;AAAA,IAEIE,WAAWF,QAAQ,aAAR,CAFf;;AAIA;AACA,IAAIG,uBAAuB,CAA3B;AAAA,IACIC,yBAAyB,CAD7B;;AAGA;;;;;;;;;;;;;AAaA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,OAAnC,EAA4CC,UAA5C,EAAwDC,SAAxD,EAAmEC,KAAnE,EAA0E;AACxE,MAAIC,YAAYJ,UAAUL,oBAA1B;AAAA,MACIU,YAAYP,MAAMQ,MADtB;AAAA,MAEIC,YAAYR,MAAMO,MAFtB;;AAIA,MAAID,aAAaE,SAAb,IAA0B,EAAEH,aAAaG,YAAYF,SAA3B,CAA9B,EAAqE;AACnE,WAAO,KAAP;AACD;AACD;AACA,MAAIG,UAAUL,MAAMM,GAAN,CAAUX,KAAV,CAAd;AACA,MAAIU,WAAWL,MAAMM,GAAN,CAAUV,KAAV,CAAf,EAAiC;AAC/B,WAAOS,WAAWT,KAAlB;AACD;AACD,MAAIW,QAAQ,CAAC,CAAb;AAAA,MACIC,SAAS,IADb;AAAA,MAEIC,OAAQZ,UAAUJ,sBAAX,GAAqC,IAAIL,QAAJ,EAArC,GAAoDsB,SAF/D;;AAIAV,QAAMW,GAAN,CAAUhB,KAAV,EAAiBC,KAAjB;AACAI,QAAMW,GAAN,CAAUf,KAAV,EAAiBD,KAAjB;;AAEA;AACA,SAAO,EAAEY,KAAF,GAAUL,SAAjB,EAA4B;AAC1B,QAAIU,WAAWjB,MAAMY,KAAN,CAAf;AAAA,QACIM,WAAWjB,MAAMW,KAAN,CADf;;AAGA,QAAIT,UAAJ,EAAgB;AACd,UAAIgB,WAAWb,YACXH,WAAWe,QAAX,EAAqBD,QAArB,EAA+BL,KAA/B,EAAsCX,KAAtC,EAA6CD,KAA7C,EAAoDK,KAApD,CADW,GAEXF,WAAWc,QAAX,EAAqBC,QAArB,EAA+BN,KAA/B,EAAsCZ,KAAtC,EAA6CC,KAA7C,EAAoDI,KAApD,CAFJ;AAGD;AACD,QAAIc,aAAaJ,SAAjB,EAA4B;AAC1B,UAAII,QAAJ,EAAc;AACZ;AACD;AACDN,eAAS,KAAT;AACA;AACD;AACD;AACA,QAAIC,IAAJ,EAAU;AACR,UAAI,CAACnB,UAAUM,KAAV,EAAiB,UAASiB,QAAT,EAAmBE,QAAnB,EAA6B;AAC7C,YAAI,CAACxB,SAASkB,IAAT,EAAeM,QAAf,CAAD,KACCH,aAAaC,QAAb,IAAyBd,UAAUa,QAAV,EAAoBC,QAApB,EAA8BhB,OAA9B,EAAuCC,UAAvC,EAAmDE,KAAnD,CAD1B,CAAJ,EAC0F;AACxF,iBAAOS,KAAKO,IAAL,CAAUD,QAAV,CAAP;AACD;AACF,OALA,CAAL,EAKQ;AACNP,iBAAS,KAAT;AACA;AACD;AACF,KAVD,MAUO,IAAI,EACLI,aAAaC,QAAb,IACEd,UAAUa,QAAV,EAAoBC,QAApB,EAA8BhB,OAA9B,EAAuCC,UAAvC,EAAmDE,KAAnD,CAFG,CAAJ,EAGA;AACLQ,eAAS,KAAT;AACA;AACD;AACF;AACDR,QAAM,QAAN,EAAgBL,KAAhB;AACAK,QAAM,QAAN,EAAgBJ,KAAhB;AACA,SAAOY,MAAP;AACD;;AAEDS,OAAOC,OAAP,GAAiBxB,WAAjB","file":"_equalArrays.js","sourcesContent":["var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n"]}