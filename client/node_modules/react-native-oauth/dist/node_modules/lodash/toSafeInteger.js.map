{"version":3,"sources":["../../../node_modules/lodash/toSafeInteger.js"],"names":["baseClamp","require","toInteger","MAX_SAFE_INTEGER","toSafeInteger","value","module","exports"],"mappings":";;AAAA,IAAIA,YAAYC,QAAQ,cAAR,CAAhB;AAAA,IACIC,YAAYD,QAAQ,aAAR,CADhB;;AAGA;AACA,IAAIE,mBAAmB,gBAAvB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,WAAOA,QACHL,UAAUE,UAAUG,KAAV,CAAV,EAA4B,CAACF,gBAA7B,EAA+CA,gBAA/C,CADG,GAEFE,UAAU,CAAV,GAAcA,KAAd,GAAsB,CAF3B;AAGD;;AAEDC,OAAOC,OAAP,GAAiBH,aAAjB","file":"toSafeInteger.js","sourcesContent":["var baseClamp = require('./_baseClamp'),\n    toInteger = require('./toInteger');\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Converts `value` to a safe integer. A safe integer can be compared and\n * represented correctly.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toSafeInteger(3.2);\n * // => 3\n *\n * _.toSafeInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toSafeInteger(Infinity);\n * // => 9007199254740991\n *\n * _.toSafeInteger('3.2');\n * // => 3\n */\nfunction toSafeInteger(value) {\n  return value\n    ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n    : (value === 0 ? value : 0);\n}\n\nmodule.exports = toSafeInteger;\n"]}