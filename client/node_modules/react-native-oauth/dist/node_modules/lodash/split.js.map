{"version":3,"sources":["../../../node_modules/lodash/split.js"],"names":["baseToString","require","castSlice","hasUnicode","isIterateeCall","isRegExp","stringToArray","toString","MAX_ARRAY_LENGTH","split","string","separator","limit","undefined","module","exports"],"mappings":";;AAAA,IAAIA,eAAeC,QAAQ,iBAAR,CAAnB;AAAA,IACIC,YAAYD,QAAQ,cAAR,CADhB;AAAA,IAEIE,aAAaF,QAAQ,eAAR,CAFjB;AAAA,IAGIG,iBAAiBH,QAAQ,mBAAR,CAHrB;AAAA,IAIII,WAAWJ,QAAQ,YAAR,CAJf;AAAA,IAKIK,gBAAgBL,QAAQ,kBAAR,CALpB;AAAA,IAMIM,WAAWN,QAAQ,YAAR,CANf;;AAQA;AACA,IAAIO,mBAAmB,UAAvB;;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,SAASC,KAAT,CAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,KAAlC,EAAyC;AACvC,MAAIA,SAAS,OAAOA,KAAP,IAAgB,QAAzB,IAAqCR,eAAeM,MAAf,EAAuBC,SAAvB,EAAkCC,KAAlC,CAAzC,EAAmF;AACjFD,gBAAYC,QAAQC,SAApB;AACD;AACDD,UAAQA,UAAUC,SAAV,GAAsBL,gBAAtB,GAAyCI,UAAU,CAA3D;AACA,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,EAAP;AACD;AACDF,WAASH,SAASG,MAAT,CAAT;AACA,MAAIA,WACE,OAAOC,SAAP,IAAoB,QAApB,IACCA,aAAa,IAAb,IAAqB,CAACN,SAASM,SAAT,CAFzB,CAAJ,EAGO;AACLA,gBAAYX,aAAaW,SAAb,CAAZ;AACA,QAAI,CAACA,SAAD,IAAcR,WAAWO,MAAX,CAAlB,EAAsC;AACpC,aAAOR,UAAUI,cAAcI,MAAd,CAAV,EAAiC,CAAjC,EAAoCE,KAApC,CAAP;AACD;AACF;AACD,SAAOF,OAAOD,KAAP,CAAaE,SAAb,EAAwBC,KAAxB,CAAP;AACD;;AAEDE,OAAOC,OAAP,GAAiBN,KAAjB","file":"split.js","sourcesContent":["var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    isIterateeCall = require('./_isIterateeCall'),\n    isRegExp = require('./isRegExp'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Splits `string` by `separator`.\n *\n * **Note:** This method is based on\n * [`String#split`](https://mdn.io/String/split).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to split.\n * @param {RegExp|string} separator The separator pattern to split by.\n * @param {number} [limit] The length to truncate results to.\n * @returns {Array} Returns the string segments.\n * @example\n *\n * _.split('a-b-c', '-', 2);\n * // => ['a', 'b']\n */\nfunction split(string, separator, limit) {\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n    separator = limit = undefined;\n  }\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n  if (!limit) {\n    return [];\n  }\n  string = toString(string);\n  if (string && (\n        typeof separator == 'string' ||\n        (separator != null && !isRegExp(separator))\n      )) {\n    separator = baseToString(separator);\n    if (!separator && hasUnicode(string)) {\n      return castSlice(stringToArray(string), 0, limit);\n    }\n  }\n  return string.split(separator, limit);\n}\n\nmodule.exports = split;\n"]}