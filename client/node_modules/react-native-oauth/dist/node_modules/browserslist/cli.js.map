{"version":3,"sources":["../../../node_modules/browserslist/cli.js"],"names":["fs","require","browserslist","pkg","args","process","argv","slice","USAGE","name","isArg","arg","some","str","indexOf","error","msg","stderr","write","exit","stdout","description","version","mode","opts","queries","country","i","length","replace","split","value","config","env","stats","browsers","findConfig","cwd","path","e","message","forEach","browser","JSON","parse","readFileSync","result","coverage","round","Math","end","toUpperCase"],"mappings":"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","file":"cli.js","sourcesContent":["\n\nvar fs = require('fs')\n\nvar browserslist = require('./')\nvar pkg = require('./package.json')\nvar args = process.argv.slice(2)\n\nvar USAGE = 'Usage:\\n' +\n            '  ' + pkg.name + '\\n' +\n            '  ' + pkg.name + ' \"QUERIES\"\\n' +\n            '  ' + pkg.name + ' --config=\"path/to/browserlist/file\"\\n' +\n            '  ' + pkg.name + ' --coverage \"QUERIES\"\\n' +\n            '  ' + pkg.name + ' --coverage=US \"QUERIES\"\\n' +\n            '  ' + pkg.name + ' --env=\"environment name defined in config\"\\n' +\n            '  ' + pkg.name + ' --stats=\"path/to/browserlist/stats/file\"'\n\nfunction isArg (arg) {\n  return args.some(function (str) {\n    return str === arg || str.indexOf(arg + '=') === 0\n  })\n}\n\nfunction error (msg) {\n  process.stderr.write(pkg.name + ': ' + msg + '\\n')\n  process.exit(1)\n}\n\nif (isArg('--help') || isArg('-h')) {\n  process.stdout.write(pkg.description + '.\\n\\n' + USAGE + '\\n')\n} else if (isArg('--version') || isArg('-v')) {\n  process.stdout.write(pkg.name + ' ' + pkg.version + '\\n')\n} else {\n  var mode = 'browsers'\n  var opts = { }\n  var queries\n  var country\n\n  for (var i = 0; i < args.length; i++) {\n    if (args[i][0] !== '-') {\n      queries = args[i].replace(/^[\"']|[\"']$/g, '')\n      continue\n    }\n\n    var arg = args[i].split('=')\n    var name = arg[0]\n    var value = arg[1]\n\n    if (value) value = value.replace(/^[\"']|[\"']$/g, '')\n\n    if (name === '--config' || name === '-b') {\n      opts.config = value\n    } else if (name === '--env' || name === '-e') {\n      opts.env = value\n    } else if (name === '--stats' || name === '-s') {\n      opts.stats = value\n    } else if (name === '--coverage' || name === '-c') {\n      mode = 'coverage'\n      if (value) country = value\n    } else {\n      error('Unknown arguments ' + args[i] + '.\\n\\n' + USAGE)\n    }\n  }\n\n  var browsers\n  try {\n    if (!queries && !opts.config) {\n      if (browserslist.findConfig(process.cwd())) {\n        opts.path = process.cwd()\n      } else {\n        error(\n          'Browserslist config was not found. ' +\n          'Define queries or config path.' +\n          '\\n\\n' + USAGE\n        )\n      }\n    }\n    browsers = browserslist(queries, opts)\n  } catch (e) {\n    if (e.name === 'BrowserslistError') {\n      error(e.message)\n    } else {\n      throw e\n    }\n  }\n\n  if (mode === 'browsers') {\n    browsers.forEach(function (browser) {\n      process.stdout.write(browser + '\\n')\n    })\n  } else {\n    var stats\n    if (country) {\n      stats = country\n    } else if (opts.stats) {\n      stats = JSON.parse(fs.readFileSync(opts.stats))\n    }\n    var result = browserslist.coverage(browsers, stats)\n    var round = Math.round(result * 100) / 100.0\n\n    var end = 'globally'\n    if (country && country !== 'global') {\n      end = 'in the ' + country.toUpperCase()\n    } else if (opts.stats) {\n      end = 'in custom statistics'\n    }\n\n    process.stdout.write(\n      'These browsers account for ' + round + '% of all users ' +\n            end + '\\n')\n  }\n}\n"]}