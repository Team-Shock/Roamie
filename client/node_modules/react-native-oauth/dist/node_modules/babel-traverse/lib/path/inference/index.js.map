{"version":3,"sources":["../../../../../../node_modules/babel-traverse/lib/path/inference/index.js"],"names":["exports","__esModule","_getIterator2","require","_getIterator3","_interopRequireDefault","getTypeAnnotation","_getTypeAnnotation","isBaseType","couldBeBaseType","baseTypeStrictlyMatches","isGenericType","_inferers","inferers","_interopRequireWildcard","_babelTypes","t","obj","newObj","key","Object","prototype","hasOwnProperty","call","default","typeAnnotation","type","anyTypeAnnotation","isTypeAnnotation","node","parentPath","isVariableDeclarator","declar","declarParent","isForInStatement","stringTypeAnnotation","isForOfStatement","voidTypeAnnotation","inferer","validParent","baseName","soft","_isBaseType","isStringTypeAnnotation","isNumberTypeAnnotation","isBooleanTypeAnnotation","isAnyTypeAnnotation","isMixedTypeAnnotation","isEmptyTypeAnnotation","isVoidTypeAnnotation","Error","name","isUnionTypeAnnotation","_iterator","types","_isArray","Array","isArray","_i","_ref","length","next","done","value","type2","right","left","isFlowBaseAnnotation","genericName","isGenericTypeAnnotation","isIdentifier","id"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nexports.getTypeAnnotation = getTypeAnnotation;\nexports._getTypeAnnotation = _getTypeAnnotation;\nexports.isBaseType = isBaseType;\nexports.couldBeBaseType = couldBeBaseType;\nexports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\nexports.isGenericType = isGenericType;\n\nvar _inferers = require(\"./inferers\");\n\nvar inferers = _interopRequireWildcard(_inferers);\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getTypeAnnotation() {\n  if (this.typeAnnotation) return this.typeAnnotation;\n\n  var type = this._getTypeAnnotation() || t.anyTypeAnnotation();\n  if (t.isTypeAnnotation(type)) type = type.typeAnnotation;\n  return this.typeAnnotation = type;\n}\n\nfunction _getTypeAnnotation() {\n  var node = this.node;\n\n  if (!node) {\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      var declar = this.parentPath.parentPath;\n      var declarParent = declar.parentPath;\n\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return t.stringTypeAnnotation();\n      }\n\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return t.anyTypeAnnotation();\n      }\n\n      return t.voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n\n  if (node.typeAnnotation) {\n    return node.typeAnnotation;\n  }\n\n  var inferer = inferers[node.type];\n  if (inferer) {\n    return inferer.call(this, node);\n  }\n\n  inferer = inferers[this.parentPath.type];\n  if (inferer && inferer.validParent) {\n    return this.parentPath.getTypeAnnotation();\n  }\n}\n\nfunction isBaseType(baseName, soft) {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\n\nfunction _isBaseType(baseName, type, soft) {\n  if (baseName === \"string\") {\n    return t.isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return t.isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return t.isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return t.isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return t.isMixedTypeAnnotation(type);\n  } else if (baseName === \"empty\") {\n    return t.isEmptyTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return t.isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(\"Unknown base type \" + baseName);\n    }\n  }\n}\n\nfunction couldBeBaseType(name) {\n  var type = this.getTypeAnnotation();\n  if (t.isAnyTypeAnnotation(type)) return true;\n\n  if (t.isUnionTypeAnnotation(type)) {\n    for (var _iterator = type.types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var type2 = _ref;\n\n      if (t.isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\n\nfunction baseTypeStrictlyMatches(right) {\n  var left = this.getTypeAnnotation();\n  right = right.getTypeAnnotation();\n\n  if (!t.isAnyTypeAnnotation(left) && t.isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n}\n\nfunction isGenericType(genericName) {\n  var type = this.getTypeAnnotation();\n  return t.isGenericTypeAnnotation(type) && t.isIdentifier(type.id, { name: genericName });\n}"]}