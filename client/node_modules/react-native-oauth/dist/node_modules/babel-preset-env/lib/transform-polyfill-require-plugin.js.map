{"version":3,"sources":["../../../../node_modules/babel-preset-env/lib/transform-polyfill-require-plugin.js"],"names":["exports","__esModule","default","_ref","t","types","createImportDeclaration","polyfill","declar","importDeclaration","stringLiteral","_blockHoist","createRequireStatement","expressionStatement","callExpression","identifier","isRequire","path","isExpressionStatement","node","isCallExpression","expression","isIdentifier","callee","name","arguments","length","isStringLiteral","isPolyfillSource","value","createImport","requireType","core","createImports","polyfills","regenerator","imports","filter","el","i","arr","indexOf","map","concat","Boolean","isPolyfillImport","ImportDeclaration","state","specifiers","source","numPolyfillImports","remove","replaceWithMultiple","opts","Program","_this","buildCodeFrameError","get","forEach","bodyPath","visitor","pre"],"mappings":"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","file":"transform-polyfill-require-plugin.js","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (_ref) {\n  var t = _ref.types;\n\n  function createImportDeclaration(polyfill) {\n    var declar = t.importDeclaration([], t.stringLiteral(polyfill));\n    declar._blockHoist = 3;\n    return declar;\n  }\n\n  function createRequireStatement(polyfill) {\n    return t.expressionStatement(t.callExpression(t.identifier(\"require\"), [t.stringLiteral(polyfill)]));\n  }\n\n  function isRequire(path) {\n    return t.isExpressionStatement(path.node) && t.isCallExpression(path.node.expression) && t.isIdentifier(path.node.expression.callee) && path.node.expression.callee.name === \"require\" && path.node.expression.arguments.length === 1 && t.isStringLiteral(path.node.expression.arguments[0]) && isPolyfillSource(path.node.expression.arguments[0].value);\n  }\n\n  function createImport(polyfill, requireType, core) {\n    if (core) {\n      polyfill = \"core-js/modules/\" + polyfill;\n    }\n\n    if (requireType === \"import\") {\n      return createImportDeclaration(polyfill);\n    } else {\n      return createRequireStatement(polyfill);\n    }\n  }\n\n  function createImports(polyfills, requireType, regenerator) {\n    var imports = polyfills.filter(function (el, i, arr) {\n      return arr.indexOf(el) === i;\n    }).map(function (polyfill) {\n      return createImport(polyfill, requireType, true);\n    });\n\n    return [].concat(imports, [regenerator && createImport(\"regenerator-runtime/runtime\", requireType)]).filter(Boolean);\n  }\n\n  var isPolyfillImport = {\n    ImportDeclaration: function ImportDeclaration(path, state) {\n      if (path.node.specifiers.length === 0 && isPolyfillSource(path.node.source.value)) {\n        this.numPolyfillImports++;\n        if (this.numPolyfillImports > 1) {\n          path.remove();\n          return;\n        }\n\n        path.replaceWithMultiple(createImports(state.opts.polyfills, \"import\", state.opts.regenerator));\n      }\n    },\n    Program: function Program(path, state) {\n      var _this = this;\n\n      if (!state.opts.polyfills) {\n        throw path.buildCodeFrameError(\"\\nThere was an issue in \\\"babel-preset-env\\\" such that\\nthe \\\"polyfills\\\" option was not correctly passed\\nto the \\\"transform-polyfill-require\\\" plugin\\n\");\n      }\n      path.get(\"body\").forEach(function (bodyPath) {\n        if (isRequire(bodyPath)) {\n          _this.numPolyfillImports++;\n          if (_this.numPolyfillImports > 1) {\n            path.remove();\n            return;\n          }\n\n          bodyPath.replaceWithMultiple(createImports(state.opts.polyfills, \"require\", state.opts.regenerator));\n        }\n      });\n    }\n  };\n\n  return {\n    name: \"transform-polyfill-require\",\n    visitor: isPolyfillImport,\n    pre: function pre() {\n      this.numPolyfillImports = 0;\n    }\n  };\n};\n\nfunction isPolyfillSource(value) {\n  return value === \"babel-polyfill\" || value === \"core-js\";\n}"]}