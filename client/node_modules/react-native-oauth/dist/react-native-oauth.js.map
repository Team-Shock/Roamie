{"version":3,"sources":["../react-native-oauth.js"],"names":["OAuthManagerBridge","NativeModules","OAuthManager","configured","STORAGE_KEY","authProviders","defaultProviders","identity","props","appName","opts","_options","provider","Object","assign","providerConfigs","configureProviders","options","app_name","promises","providers","map","savedAccount","name","catch","status","Promise","all","then","accountResp","accounts","filter","acc","url","console","log","response","data","JSON","parse","isSupported","providerCfg","validate","transform","callback_url","config","defaultParams","keys","reduce","sum","key","configureProvider","indexOf"],"mappings":"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","file":"react-native-oauth.js","sourcesContent":["/**\n * @providesModule OAuthManager\n * @flow\n */\nimport {\n  NativeModules,\n  AsyncStorage\n} from 'react-native';\nimport invariant from 'invariant';\n\nconst OAuthManagerBridge = NativeModules.OAuthManager;\n\nlet configured = false;\nconst STORAGE_KEY = 'ReactNativeOAuth';\nimport promisify from './lib/promisify'\nimport defaultProviders from './lib/authProviders';\n\nlet authProviders = defaultProviders;\n\nconst identity = (props) => props;\n/**\n * Manager is the OAuth layer\n **/\nexport default class OAuthManager {\n  constructor(appName, opts={}) {\n    invariant(appName && appName != '', `You must provide an appName to the OAuthManager`);\n\n    this.appName = appName;\n    this._options = opts;\n  }\n\n  addProvider(provider) {\n    authProviders = Object.assign({}, authProviders, provider);\n  }\n\n  configure(providerConfigs) {\n    return this.configureProviders(providerConfigs)\n  }\n\n  authorize(provider, opts={}) {\n    const options = Object.assign({}, this._options, opts, {\n      app_name: this.appName\n    })\n    return promisify('authorize')(provider, options);\n  }\n\n  savedAccounts(opts={}) {\n    // const options = Object.assign({}, this._options, opts, {\n      // app_name: this.appName\n    // })\n    // return promisify('getSavedAccounts')(options);\n    const promises = this.providers()\n                          .map(name => {\n                            return this.savedAccount(name)\n                              .catch(err => ({provider: name, status: \"error\"}));\n                          });\n    return Promise.all(promises)\n      .then((accountResp) => {\n        const accounts = accountResp.filter(acc => acc.status == \"ok\");\n        return { accounts }\n      });\n  }\n\n  savedAccount(provider) {\n    const options = Object.assign({}, this._options, {\n      app_name: this.appName\n    })\n    return promisify('getSavedAccount')(provider, options);\n  }\n\n  makeRequest(provider, url, opts={}) {\n    const options = Object.assign({}, this._options, opts, {\n      app_name: this.appName\n    });\n\n    console.log('making request', provider, url, opts);\n\n    return promisify('makeRequest')(provider, url, options)\n      .then(response => {\n        // Little bit of a hack to support Android until we have a better\n        // way of decoding the JSON response on the Android side\n        if (response && response.data && typeof response.data === \"string\") {\n          response.data = JSON.parse(response.data);\n        }\n        return response;\n      });\n  }\n\n  deauthorize(provider) {\n    return promisify('deauthorize')(provider);\n  }\n\n  providers() {\n    return OAuthManager.providers();\n  }\n\n  static providers() {\n    return Object.keys(authProviders);\n  }\n\n  static isSupported(name) {\n    return OAuthManager.providers().indexOf(name) >= 0;\n  }\n\n  // Private\n  /**\n   * Configure a single provider\n   *\n   *\n   * @param {string} name of the provider\n   * @param {object} additional configuration\n   *\n   **/\n  configureProvider(name, props) {\n    invariant(OAuthManager.isSupported(name), `The provider ${name} is not supported yet`);\n\n    const providerCfg = Object.assign({}, authProviders[name]);\n    let { validate = identity, transform = identity, callback_url } = providerCfg;\n    delete providerCfg.transform;\n    delete providerCfg.validate;\n\n    let config = Object.assign({}, {\n      app_name: this.appName,\n      callback_url\n    }, providerCfg, props);\n\n    if (config.defaultParams) {\n      delete config.defaultParams;\n    }\n\n    config = Object.keys(config)\n      .reduce((sum, key) => ({\n        ...sum,\n        [key]: typeof config[key] === 'function' ? config[key](config) : config[key]\n      }), {});\n\n    validate(config);\n\n    return promisify('configureProvider')(name, config);\n  }\n\n  configureProviders(providerConfigs) {\n    providerConfigs = providerConfigs || this._options;\n    const promises = Object\n            .keys(providerConfigs)\n            .map(name =>\n              this.configureProvider(name, providerConfigs[name]));\n    return Promise.all(promises)\n      .then(() => this);\n  }\n}\n"]}